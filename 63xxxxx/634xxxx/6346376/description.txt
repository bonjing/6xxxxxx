



Matthew Scarpino, "Programming the Cell Processor: For Games, Graphics, and Computation"
Prentice Hall PTR | 2008 | ISBN: 0136008860 | 744 pages | CHM | 6,8 MB

Make the Most of IBMâ€™s Breakthrough Cell Processor in Any Gaming, Graphics, or Scientific Application


IBMâ€™s Cell processor delivers truly stunning computational power: enough to satisfy even the most demanding gamers and graphics developers. Thatâ€™s why Sony chose the Cell to drive its breakthrough PlayStation 3 and why Cell processors are at the heart of todayâ€™s most powerful supercomputers. But many developers have struggled to create high-performance Cell applications: the practical, coherent information they need simply hasnâ€™t existed.


Programming the Cell Processor solves that problem once and for all. Whether youâ€™re a game developer, graphics programmer, or engineer, Matthew Scarpino shows you how to create applications that leverage all the Cellâ€™s extraordinary power. Scarpino covers everything from the Cellâ€™s advanced architecture to its powerful tools and libraries, presenting realistic code examples that help you gain an increasingly deep and intuitive understanding of Cell development.


Scarpino illuminates each of the Cellâ€™s most important technical innovations, introduces the commands needed to access its power, and walks you through the entire development process, including compiling, linking, debugging, and simulating code. He also offers start-to-finish case studies for three especially important Cell applications: games, graphics, and scientific computing. The Cell platform offers unprecedented potential, and this book will help you make the most of it.

Mastering the Cell SDK, including the GCC-based buildchain, ppu-gdb/spu-gdb debuggers, IBM Full System Simulator, and Cell IDE
Understanding the Cellâ€™s central processing core, the PowerPC Processor Unit (PPU): structure, programming libraries, and AltiVec instructions
Programming the Synergistic Processor Unit (SPU): vector processing, communication, caching, assembler coding, and more
Leveraging SDK vector and matrix libraries, including the Large Matrix Library, BLAS Library, FFT libraries, Multiprecision Library, and Monte Carlo API
Coding basic 2D graphics using the Linux frame buffer
Building 3D graphics with the new Gallium OpenGL library
Constructing 3D games with Ogre3D and packaging them using Collada digital content interchange
Optimizing the performance of your Cell applications
Developing on standard PCs and transferring code to Cell systems such as the PlayStation 3
